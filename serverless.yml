service: cloudplanner-api

plugins:
  - serverless-webpack

custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs4.3
  stage: v1
  region: us-east-1

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate the api via Cognito User Pool. Update the 'arn'
  #     with your own User Pool ARN
  pgtest:
    handler: pg.main
    events:
      - http:
          path: pgall
          method: get
          cors: true

  pgQrow:
    # Defines an HTTP API endpoint that calls the main function in pgrow.js
    # - path: url path is /pgquery?=10
    # - method: GET request
    # - return: first 100 row of record
    # - purpose: test rest api
    handler: pgqrow.main
    description: return number of rows in query
    events:
      - http:
          path: pgquery
          method: get
          cors: true
          integration: lambda
          request:
            passThrough: WHEN_NO_MATCH
            parameters:
              querystrings:
                row: true

  pgQProw:
    # Defines an HTTP API endpoint that calls the main function in pgqprow.js
    # - path: url path is /pgquery/{data}
    # - method: POST request
    # - return: first 100 row of record
    # - purpose: try using post method
    handler: pgqprow.main
    events:
      - http:
          path: pgquery
          method: post
          cors: true
